---
interface Props {
  src: string;
  title?: string;
}

const { src, title = "Form" } = Astro.props;
---

<div class="bg-white rounded-xl">
  <iframe 
    src={src}
    width="100%"
    height="1000"
    frameborder="0"
    marginheight="0"
    marginwidth="0"
    class="rounded-lg w-full"
    title={title}
    id={`iframe-${src.split('/').pop()}`}
  >
    Loadingâ€¦
  </iframe>
</div>

<script>
  // Function to handle iframe resizing
  function resizeIframe(iframe: HTMLIFrameElement) {
    iframe.onload = () => {
      // Add a small delay to ensure content is fully loaded
      setTimeout(() => {
        try {
          // Try to get the content height
          const height = iframe.contentWindow?.document.body.scrollHeight;
          if (height) {
            iframe.style.height = `${height}px`;
          }
        } catch (e) {
          console.warn('Could not resize iframe:', e);
        }
      }, 100);
    };

    // Listen for messages from the iframe (if the form supports postMessage)
    window.addEventListener('message', (event) => {
      if (event.data?.type === 'resize' && event.data?.height) {
        iframe.style.height = `${event.data.height}px`;
      }
    });
  }

  // Initialize all iframes
  document.querySelectorAll('iframe').forEach((iframe) => {
    resizeIframe(iframe as HTMLIFrameElement);
  });

  // Handle dynamic content changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach((node) => {
          if (node instanceof HTMLIFrameElement) {
            resizeIframe(node);
          }
        });
      }
    });
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
</script> 